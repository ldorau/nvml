#!/usr/bin/env bash
#
# Copyright 2018, Intel Corporation
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#     * Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

#
# src/test/util_badblock/TEST11 -- unit test for util_badblock
#                                 - two regular files with bad blocks
#                                 - list, clear and list again
#                                   bad blocks in two files
#                                 - remove and recreate two files
#

# standard unit test setup
. ../unittest/unittest.sh

require_test_type medium
require_fs_type non-pmem

require_nfit_tests_enabled
require_sudo_allowed
require_kernel_module nfit_test
require_linked_with_ndctl ./util_badblock$EXESUFFIX
require_command ndctl

# append logs
export UNITTEST_LOG_APPEND=1

setup

. ../common_badblock.sh

#
# create_file - create a file with given name and size
#
function create_file() {
	FILE=$1
	SIZE=$2
	COUNT=$(($SIZE / 512))

	fallocate -l $SIZE $FILE
	dd if=/dev/zero of=$FILE count=$COUNT status=none
}

#
# inject_bad_block - inject a bad block into the first block of the file
#
function inject_bad_block() {
	FILE=$1
	FIRST_SECTOR=$(expect_normal_exit $EXTENTS $FILE -l 0)
	ndctl_inject_error $NAMESPACE $FIRST_SECTOR 1
}

set -e

ndctl_nfit_test_init

DEVICE=$(ndctl_nfit_test_get_block_device)
NAMESPACE=$(ndctl_nfit_test_get_namespace_of_device $DEVICE)
FULLDEV="/dev/$DEVICE"
MOUNT_DIR="$DIR/mnt-pmem"
FILE1=$MOUNT_DIR/testfile1
FILE2=$MOUNT_DIR/testfile2

ndctl_nfit_test_mount_pmem $FULLDEV $MOUNT_DIR

# get available size of the device (column #4)
DEV_SIZE=$(df | grep -e "$FULLDEV" | awk '{ print $4; }' )
# set size of two files
SIZE="$(($((${DEV_SIZE} - 1024)) / 2))"

# create two files
create_file $FILE1 $SIZE
create_file $FILE2 $SIZE

# inject a bad block into the first block of both files
inject_bad_block $FILE1
inject_bad_block $FILE2

# list, clear and list again bad blocks in both files:
expect_normal_exit ./util_badblock$EXESUFFIX $FILE1 l c l
expect_normal_exit ./util_badblock$EXESUFFIX $FILE2 l c l

# remove both files
rm -f $FILE1 $FILE2

# make sure files do not exist
expect_abnormal_exit "stat $FILE1 2>/dev/null"
expect_abnormal_exit "stat $FILE2 2>/dev/null"

# create again both files
create_file $FILE1 $SIZE
create_file $FILE2 $SIZE

# list bad blocks in both files:
expect_normal_exit ./util_badblock$EXESUFFIX $FILE1 l
expect_normal_exit ./util_badblock$EXESUFFIX $FILE2 l

ndctl_nfit_test_fini $MOUNT_DIR

check

pass
