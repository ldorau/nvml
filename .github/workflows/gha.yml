name: test WIN
on: [push, pull_request]

env:
    GITHUB_REPO:    pmem/pmdk
    DOCKERHUB_REPO: pmem/pmdk

jobs:
  windows:
    name: Windows
    runs-on: windows-latest
    env:
      platform: x64
      solutionname: PMDK.sln
      ex_solutionname: Examples.sln
      msbuild: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\Bin"
      perl: "C:\\Strawberry\\perl\\bin"
    strategy:
      matrix:
        CONFIG: [Debug] # , Release]
    steps:
       - name: Update Path
         run: |
           echo "::add-path::$Env:msbuild"
           echo "::add-path::$Env:perl"

       - name: Clone the git repo
         uses: actions/checkout@v1

       - name: Install PsScriptAnalyzer
         run: Install-Module PsScriptAnalyzer -Force

       - name: Various checks (cstyle, whitespace etc.)
         run: |
           if ("${{ matrix.CONFIG }}" -eq "Debug")
           {
              utils/CSTYLE.ps1
              if ($LASTEXITCODE -ne 0) {
                 exit 1
              }
              utils/CHECK_WHITESPACE.ps1
              if ($LASTEXITCODE -ne 0) {
                 exit 1
              }
              utils/ps_analyze.ps1
              if ($LASTEXITCODE -ne 0) {
                 exit 1
              }
              perl utils/sort_solution check
              if ($LASTEXITCODE -ne 0) {
                 exit 1
              }
              ./utils/check_sdk_version.py -d .
              if ($LASTEXITCODE -ne 0) {
                 exit 1
              }
           }

       - name: Build
         run: |
           msbuild src\$Env:solutionname -property:Configuration=${{ matrix.CONFIG }} -m -v:m
           msbuild src\examples\$Env:ex_solutionname -property:Configuration=${{ matrix.CONFIG }} -m -v:m

       - name: Create ZIP archive
         run: utils/CREATE-ZIP.ps1 -b ${{ matrix.CONFIG }}

       - name: Run tests
         run: |
           if ($true) {
               cd src\test
               echo "`$Env:NON_PMEM_FS_DIR = `"C:\temp`"" >> testconfig.ps1
               echo "`$Env:PMEM_FS_DIR = `"C:\temp`"" >> testconfig.ps1
               echo "`$Env:PMEM_FS_DIR_FORCE_PMEM = `"1`"" >> testconfig.ps1
               echo "`$Env:PMDK_NO_ABORT_MSG = `"1`"" >> testconfig.ps1
               echo "`$Env:TM = `"1`"" >> testconfig.ps1
               write-output "config = {'unittest_log_level': 1, 'pmem_fs_dir': 'C:\\temp', 'non_pmem_fs_dir': 'C:\\temp', 'tm': True, 'test_type': 'check', 'fs': 'all', 'fs_dir_force_pmem': 1, 'keep_going': False, 'timeout': '4m', 'build': 'debug', 'force_enable': None}" | out-file "testconfig.py" -encoding utf8
               Set-PSDebug -Trace 1 # debug trace PS scripts
               if ("${{ matrix.CONFIG }}" -eq "Debug") {
                   ./RUNTESTS.ps1 -b debug -o 4m
                   if ($?) {
                       ./RUNTESTS.py -b debug
                   }
               }
               if ("${{ matrix.CONFIG }}" -eq "Release") {
                   ./RUNTESTS.ps1 -b nondebug -o 4m
                   if ($?) {
                       ./RUNTESTS.py -b release
                   }
               }
           }
